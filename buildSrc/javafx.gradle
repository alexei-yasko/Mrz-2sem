import groovy.xml.NamespaceBuilder

assert project.plugins.findPlugin(JavaPlugin): "The Java plugin must be applied before using javafx.gradle."

def javaHome = System.properties['java.home']

logger.warn("Project '$project.name' is using fx:jar.")

configurations {

    javafxrt
    javafxant

    sourceSets {
        main {
            compileClasspath += configurations.javafxrt
        }
    }
}

dependencies {
    javafxrt files("$javaHome/lib/jfxrt.jar")
    javafxant files("$javaHome/../lib/ant-javafx.jar")
}

task javafxJar(type: Jar, dependsOn: jar) {
    actions = []

    def appId = project.name
    def fallbackClassName = 'com.javafx.main.NoJavaFXFallback'

    def antfx = NamespaceBuilder.newInstance(
        ant,
        'javafx:com.sun.javafx.tools.ant')

    ant.taskdef(
        resource: 'com/sun/javafx/tools/ant/antlib.xml',
        uri: 'javafx:com.sun.javafx.tools.ant',
        classpath: configurations.javafxant.asPath)

    doLast {
        antfx.application(
            id: appId,
            name: project.name,
            mainClass: mainClassName,
            fallbackClass: fallbackClassName)

        antfx.jar(destfile: archivePath) {
            application(refid: appId)
            fileset(dir: sourceSets.main.output.classesDir)
            fileset(dir: sourceSets.main.output.resourcesDir)
        }
    }
}


task enrichedJavafxJar(type: Jar, dependsOn: javafxJar) {
    appendix = "enriched"

    doFirst {
        from project.configurations.compile.collect {
            zipTree(it).matching { exclude { it.name == 'META-INF' } }
        }

        from(zipTree(jar.archivePath))

        //TODO: fix manifest creation
        metaInf {
            from zipTree(jar.archivePath).find { it.name == "MANIFEST.MF" }
        }
    }
}
